!$Id$
#include "cppdefs.h"
!-----------------------------------------------------------------------
!BOP
!
! !MODULE: output_restart_bio
!
! !INTERFACE:
   module output_restart_bio
!
! !BFM:
!  routine to make a hotstart initialization of a model which include BFM
!  - assign all state variables with initial values derived from an netcdf-file
!  - do some checking.
!  - if state variable does not exist, initial values of 1d-gotm is taken.
!     (See bio_bfm.nml)
!    In this way old-restart files can be used if the model is extended
!    with new state variables and no complete reintialization is needed
!
! !USES:
    use domain, only: imin,imax,jmin,jmax,kmax,ioff,joff,H
    use domain, only: az,au,av
    use exceptions, only:getm_error
    use coupling_getm_bfm,only:check_reset_tracking,read_poro,&
                  set_2d_grid_parameters, start_tracking_in_jul
    use mem_globalfun,   ONLY: IntegralExp_vector
    character(len=80),private                 :: msg,sub
    REALTYPE,parameter                        :: pretty_small=1.0D-20

    public restart_file_bio

!EOP
!-----------------------------------------------------------------------

   contains
!-----------------------------------------------------------------------

!!-------------------------------------------------------------------------
!EOC
!
! !ROUTINE: restart_file_bio
!
! !INTERFACE:
     subroutine restart_file_bio(mode,fmt_file,iounit,julianday,llfull)
!
! !USES:
#ifdef BFM_GOTM
     use getm_bio,only:initial_bio_check
     use bio, only: bio_calc
     use bio_var, only: numc,numbc,bio_setup,cc,ccb
     use bfm_output,only:var_names, &
                  stPelStateS,stBenStateS,stPelStateE,stBenStateE
     use variables_bio_3d,  only: cc3d,ccb3d,ffp,ffb,bio_missing
     use variables_3d,  only: T,S
     use string_functions, ONLY: getseq_number
#ifdef INCLUDE_TRACK
     use track, only: check_ben_states_on_neg_values_for_track, &
                      check_track_states
#endif
     use mem,ONLY:iiMicroZooPlankton,ppMicroZooPlankton,iiMesoZooPlankton, &
     ppMesoZooPlankton,ppBenOrganisms,iiBenOrganisms,ppBenBacteria, &
         iiBenBacteria,ppSuspensionFeeders,iiSuspensionFeeders
     use mem,only: iiC,iiN,iiP,iiPel,iiBen,ppO3c,ppO3h,ppG3c,ppG13c,ppG23c, &
       ppG3h,ppG13h,ppG23h,iiY2,iiY6,iiG3,iiG13,iiG23,ppK3n,ppKf13n,ppKf23n
     use mem,only: ppQ6c,ppQ6n,ppQ6p,ppQ6s,ppQ16c,ppQ16n,ppQ16p,ppQ16s, &
                   ppQ26c,ppQ26n,ppQ26p,ppQ26s,ppK5s,ppK15s,ppK25s
     use mem,only: ppYFc,ppYFn,ppYFp,ppYyFc,ppYyFn,ppYyFp, &
             ppY2c,ppY2n,ppY2p,ppY3c,ppY3n,ppY3p,ppYy3c,ppYsFc,ppYD3a,ppYD3m, &
             ppY4c,ppY4n,ppY4p,ppY5c,ppY5n,ppY5p,ppY6c,ppY6n,ppY6p
     use mem,only: ppHNn,ppHNp,ppHNc,ppHac
     use mem,only: ppD1m,ppD2m,ppP6c,ppPCc,ppR6c
     use mem,only: ppDcm,ppDfm,ppirr_mass
     use mem_Param, ONLY: p_poro,p_d_tot,p_clDxm
     use mem_Bioturbation,ONLY:p_cturm,ppR6c
     use mem_BenSilica,ONLY:p_pK5_ae=>p_p_ae,p_pK5_an=>p_p_an
     use mem_BenOrganism,ONLY:p_qmYDc,p_lxlen_m,p_qhcYDmc,p_qn,p_qp
     use mem_BenBac,only:p_qBnc=>p_qnc,p_qBpc=>p_qpc
#endif
     use halo_zones, only: update_2d_halo,update_3d_halo,wait_halo
     use halo_zones, only: D_TAG
!
! !INPUT PARAMETERS:

     implicit none
     integer,intent(IN)      :: mode
     integer,intent(IN)      :: fmt_file
     integer,intent(IN)      :: iounit
     integer,intent(IN)      :: julianday
     logical,intent(IN)      :: llfull
! !LOCAL PARAMETERS:

#ifdef BFM_GOTM
     integer                                    :: i
     integer                                    :: j
     integer                                    :: n,k,l
     integer                                    :: rc
     integer                                    :: numc_hotstart
     integer                                    :: numbc_hotstart
     integer                                    :: numbc_old=0
     character(len=64)                          :: string
     character(len=64),dimension(:),allocatable :: var_names_hotstart
     REALTYPE, allocatable,target               :: old_ccb3d(:,:,:,:)
     character(len=64),dimension(:),allocatable :: old_var_names(:)
     integer                                    :: flag(numc)
     integer                                    :: flagb(numbc)
     REALTYPE                                   :: ffb_b(0:1,I2DFIELD)
     REALTYPE                                   :: cc_copy(0:kmax,1:numc)
     REALTYPE                                   :: ccb_orig(0:1,1:numbc)
     REALTYPE                                   :: ccb1d(0:1)
     REALTYPE                                   :: cc1d(0:kmax)
     REALTYPE                                   :: c_in_layer_1,cx_any
     REALTYPE                                   :: c_at_top(0:1)
     logical                                    :: reset,lldone,llcheck
     logical,save                               :: first=.true.
!
!
!EOP
!-------------------------------------------------------------------------
     if (mode.eq.WRITING.and.fmt_file.eq.BINARY) then

       if(bio_calc) then
         LEVEL3 'saving bio variables'
         if ( bio_setup /= 2 ) then
           LEVEL4 'saving 3d/pelagic variabls'
           write(iounit) numc
           write(iounit) var_names(stPelStateS:stPelStateE)
           do i=1,numc
             write(iounit) cc3d(:,:,:,i)
           enddo
          endif
          if ( bio_setup  > 2 ) then
           LEVEL4 'saving 2d/benthic variabls'
           write(iounit) numbc
           write(iounit) var_names(stBenStateS:stBenStateE)
           do i=1,numbc
             write(iounit) ccb3d(:,:,:,i)
           enddo
          endif
       end if
     elseif (mode.eq.READING) then
       if ((.not.llfull) .and.(.not.initial_bio_check)) then 
         LEVEL2 "No check of initial values  at start of run"
       endif
       if (bio_calc) then
          LEVEL3 'reading bio variables'
          if ( bio_setup /= 2 ) then
              LEVEL3 'read 3d/pelagic variables'
              if ( fmt_file.eq.BINARY) then
                read(iounit) numc_hotstart
                allocate(var_names_hotstart(1:numc_hotstart),stat=rc)
                if (rc /= 0) STOP 'reading_file_bio: Error allocating (var_names_hotstart)'
                read(iounit) var_names_hotstart
                flag=0
                do i=1,numc_hotstart
                  read(iounit) ffp
                  j=getseq_number(var_names_hotstart(i), &
                              var_names(stPelStateS:stPelStateE),numc,.TRUE.)
                  reset=check_reset_tracking(3,j,julianday, &
                                                       start_tracking_in_jul)
                  if ( j>0.and.(.not.reset)) then
                     cc3d(:,:,:,j)=ffp;flag(j)=1
                  endif
                enddo
              elseif (fmt_file.eq.NETCDF) then
                call read_restart_bio_ncdf(1,0,numc_hotstart,string)
                allocate(var_names_hotstart(1:numc_hotstart),stat=rc)
                if (rc /= 0)  &
                  STOP 'reading_file_bio: Error allocating (var_names_hotstart)'
                do i=1,numc_hotstart
                   call read_restart_bio_ncdf(3,i,n,var_names_hotstart(i))
                enddo
                flag=0
                do i=1,numc_hotstart
                   call read_restart_bio_ncdf(5,i,n,string)
                   j=getseq_number(var_names_hotstart(i), &
                               var_names(stPelStateS:stPelStateE),numc,.TRUE.)
                   reset=check_reset_tracking &
                           (3,j,julianday,start_tracking_in_jul)
                   if ( j>0.and.(.not.reset)) then
                     cc3d(:,:,:,j)=ffp(:,:,:);flag(j)=1
                   endif
                enddo
              endif
!--------------------check bio-state vars in pelagic----------------------
         
!             do i=imin,imax
!               do j=jmin,jmax
!                 if (az(i,j).ge.1) LEVEL3 'R6c,i,j:',i,j,cc3d(i,j,1,ppR6c)
!               enddo
!             enddo
              if (llfull.or.initial_bio_check) then
              l=0;lldone=.false.
              do i=imin,imax
                do j=jmin,jmax
                  n=count(cc3d(i,j,1,1:numc)<  bio_missing+_ONE_)
                  if (az(i,j) .ge. 1.and. n>0 ) then
                    write(msg, &
                      '(A,'' i='',I3,'' ('',I3'') j='',I3,'' (''I3,'')'')') &
                    'missing intial pelagic data  gridpoint',i+ioff,i,j+joff,j
                    LEVEL3 trim(msg )
                    cc3d(i,j,:,1:numc)=cc(1:numc,:)
                    T(i,j,:)=bio_missing
                    S(i,j,:)=bio_missing ;l=l+1;lldone=.true.
                    LEVEL3 'Initial values defined in bio_bfm.nml are used'
                  endif
                enddo
              enddo
              if (.not.lldone) then
                do i=imin,imax
                do j=jmin,jmax
                  if (az(i,j) .ge. 1.and. S(i,j,1)< pretty_small ) then
                    write(msg, &
                      '(A,'' i='',I3,'' ('',I3'') j='',I3,'' (''I3,'')'')') &
                    'missing intial pelagic S and T gridpoint',i+ioff,i,j+joff,j
                    LEVEL3 trim(msg )
                    T(i,j,:)=bio_missing
                    S(i,j,:)=bio_missing ;l=l+1
                    LEVEL3 'Initial values of near grid points  are used'
                  endif
                enddo
                enddo
              endif
              do while (l>0)
                do i=imin,imax
                do j=jmin,jmax
                  if (S(i,j,1)< bio_missing+_ONE_) then
                    lldone=.false.
                    do k=-1,1
                      do n=-1,1
                        if ((i+k.ge.1.and.j+n.ge.1).and. &
                        ((k.eq.0.and.n.ne.0).or.(n.eq.0.and.k.ne.0)) ) then
                        llcheck=(cc3d(i+k,j+n,1,1)>0.0) &
                                    .and.(S(i+k,j+n,1)>bio_missing+_ONE_)
                        if (llcheck.and.(.not.lldone)) then
                           T(i,j,:)=T(i+k,j+n,:)
                           S(i,j,:)=S(i+k,j+n,:)
                           lldone=.true. ;l=l-1
                        endif
                        endif
                      enddo
                    enddo
                  endif
                enddo
                enddo
              enddo
              call calc_GrpNP(iiPel,cc,flag,iiC,iiN,iiMicroZooPlankton,&
                                            kmax,numc,ppMicroZooPlankton)
              call calc_GrpNP(iiPel,cc,flag,iiC,iiP,iiMicroZooPlankton,&
                                            kmax,numc,ppMicroZooPlankton)
              call calc_GrpNP(iiPel,cc,flag,iiC,iiN,iiMesoZooPlankton,&
                                            kmax,numc,ppMesoZooPlankton)
              call calc_GrpNP(iiPel,cc,flag,iiC,iiP,iiMesoZooPlankton,&
                                            kmax,numc,ppMesoZooPlankton)
              if ( ppPCc> 0 .and. ppP6c >0 ) then
                if ( flag(ppPcc)==0 .and. flag(ppP6c) == 1) then
                  LEVEL3 'No initial values present for ppPCc'
                  LEVEL3 'Make initial values for ppPCc equal to ppP6c'
                  do i=imin,imax
                     do j=jmin,jmax
                       if (az(i,j).ge.1)&
                         cc3d(i,j,0:kmax,ppPCc)= cc3d(i,j,0:kmax,ppP6c)
                     enddo
                  enddo
                  flag(ppPcc)=1
                endif
              endif
              if (ppo3c >0) then
                if (flag(ppO3c)==0) then
                  LEVEL3 'No initial values present for ppO3c'
                  LEVEL3 'Pelagic CO2-DIC intialized'
                  cc1d=cc(0:kmax,ppO3c)
                  do i=imin,imax
                     do j=jmin,jmax
                       if (az(i,j).ge.1) cc3d(i,j,0:kmax,ppO3c)=cc1d(0:kmax)
                     enddo
                  enddo
                  cc1d=cc(0:kmax,ppO3h)
                  do i=imin,imax
                     do j=jmin,jmax
                       if (az(i,j).ge.1) cc3d(i,j,0:kmax,ppO3h)=cc1d(0:kmax)
                     enddo
                  enddo
                endif
                flag(ppO3c)=1; flag(ppO3h)=1
              endif
              l=0
              do n=1,numc
                if (flag(n)==0 ) then
                  if ( l==0) then
                    l=1;LEVEL3 'No initial data present,', &
                       ' initialized with default (1D)values'
                  endif  
                  cc1d=cc(0:kmax,n)
                  STDERR trim(var_names(n+stPelStateS-1)),":",cc1d(1) 
                  do i=imin,imax
                     do j=jmin,jmax
                       if (az(i,j) .ge. 1 ) cc3d(i,j,0:kmax,n)=cc1d(0:kmax)
                     enddo
                   enddo
                   flag(n)=1
                endif
              enddo
              do i=imin,imax
                do j=jmin,jmax
                  if (az(i,j)>0  .and. cc3d(i,j,1,1)<_ZERO_) then
                    LEVEL3 'cc3d(i,j,1,1)=',cc3d(i,j,1,1)
                    LEVEL3 'Apparently bathymetry changed for point:', i,j
                    LEVEL3 'Pelagic values for this point initialized with default (1D) values'
                    cc3d(i,j,:,:)=cc
                  endif
                enddo
              enddo
              endif
!-------------- end--check bio-state vars in pelagic----------------------
              do n=1,numc
                ffp(:,:,:)=cc3d(:,:,:,n)
                call update_3d_halo(ffp,ffp,az,imin,jmin,imax,jmax,kmax,D_TAG)
                call wait_halo(D_TAG)
                cc3d(:,:,:,n)=ffp(:,:,0:)
              enddo
              deallocate(var_names_hotstart)
          endif
          if ( bio_setup  > 2 ) then
            LEVEL3 'read 2d/benthic variables'
            if (fmt_file.eq.BINARY) then
              read(iounit) numbc_hotstart
              allocate(var_names_hotstart(1:numbc_hotstart),stat=rc)
              if (rc /= 0)  &
                STOP 'reading_file_bio: Error allocating (var_names_hotstart)'
              read(iounit) var_names_hotstart
              flagb=0
              do i=1,numbc_hotstart
                read(iounit) ffb_b
                j=getseq_number(var_names_hotstart(i),&
                           var_names(stBenStateS:stBenStateE),numbc,.TRUE.)
                reset=check_reset_tracking(2,j,julianday,start_tracking_in_jul)
                if ( j>0.and.(.not.reset)) then
                    ccb3d(:,:,:,j)=ffb_b ;flagb(j)=1
                endif
              enddo
            elseif (fmt_file.eq.NETCDF) then
              call read_restart_bio_ncdf(2,0,numbc_hotstart,string)
              allocate(var_names_hotstart(1:numbc_hotstart),stat=rc)
              if (rc /= 0) STOP  &
                   'reading_file_bio: Error allocating (var_names_hotstart)'
              do i=1,numbc_hotstart
                call read_restart_bio_ncdf(4,i,n,var_names_hotstart(i))
              enddo
              numbc_old=0
              do i=1,numbc_hotstart
                j=getseq_number(var_names_hotstart(i), &
                        var_names(stBenStateS:stBenStateE),numbc,.TRUE.)
                if (j==0) numbc_old=numbc_old+1
              enddo
              STDERR "output_restart_bio: numbc_old=",numbc_old
              if ( numbc_old>0) then
                allocate(old_ccb3d(I2DFIELD,0:1,1:numbc_old),stat=rc)
                if (rc/= 0) &
                  stop 'output_restart_bio: Error allocating memory (old_ccb3d)'
                allocate(old_var_names(1:numbc_old),stat=rc)
                if (rc/= 0) stop 'output_restart_bio: &
                                    &Error allocating memory (old_var_names)'
              endif
              flagb=0
              l=0
              do i=1,numbc_hotstart
                call read_restart_bio_ncdf(6,i,n,string)
                j=getseq_number(var_names_hotstart(i), &
                    var_names(stBenStateS:stBenStateE),numbc,.TRUE.)
!               reset=check_reset_tracking(2,j,julianday,start_tracking_in_jul)
                if ( j>0) then
                  ccb3d(:,:,1,j)=ffb;flagb(j)=1
                elseif ( numbc_old>0) then
                  l=l+1
                  old_ccb3d(:,:,1,l)=ffb;old_var_names(l)=var_names_hotstart(i)
                endif
              enddo
            endif
!--------------------check bio-state vars in benthic----------------------
            if (llfull.or.initial_bio_check) then
!           do l=1,numbc_old
!             STDERR "output_restart_bio: old_var_name=",trim(old_var_names(l))
!           enddo
!           l=numbc/2
!           do i=imin,imax
!             do j=jmin,jmax
!               n=count(ccb3d(i,j,1,1:numbc)<  bio_missing+_ONE_)
!               if (az(i,j) .ge. 1.and. n >l ) then
!                 write(msg, &
!                   '(A,'' i='',I3,'' ('',I3'') j='',I3,'' (''I3,'')'')') &
!                 'missing intial benthic data  gridpoint',i+ioff,i,j+joff,j
!                 LEVEL3 trim(msg )
!                 do n=1,numbc
!                   ccb1d=ccb(0:1,n)
!                   ccb3d(i,j,0:1,n)=ccb1d
!                 enddo
!                 LEVEL3 'Initial values defined in bio_bfm.nml are used'
!               endif
!             enddo
!           enddo
!           ccb_orig(0:1,1:numbc)=ccb(0:1,1:numbc)
!           if ( ppG3c >0 ) then
!             if ( flagb(ppG3c)==0) then
!               LEVEL3 'No initial calues present for ppG3c'
!               LEVEL3 'Benthic CO2-DIC initialized'
!               do i=imin,imax
!                 do j=jmin,jmax
!                   if (az(i,j) .ge. 1 ) then
!                     call set_2d_grid_parameters(read_poro,igrid=i,jgrid=j)
!                     ccb(0:1,1:numbc)=ccb3d(i,j,0:1,1:numbc)
!                     c_in_layer_1=cc3d(i,j,1,ppO3c)
!                     ccb(1,ppG3c)=c_in_layer_1*p_poro(1)*ccb(1,iiG3)
!                     ccb(1,ppG13c)= &
!                         c_in_layer_1*p_poro(1)*(ccb(1,iiG13)-ccb(1,iiG3))
!                     ccb(1,ppG23c)= &
!                         c_in_layer_1*p_poro(1)*(p_d_tot-ccb(1,iiG13))
!                     c_in_layer_1=cc3d(i,j,1,ppO3h)
!                     ccb(1,ppG3h)=c_in_layer_1*p_poro(1)*ccb(1,iiG3)
!                     ccb(1,ppG13h)= &
!                         c_in_layer_1*p_poro(1)*(ccb(1,iiG13)-ccb(1,iiG3))
!                     ccb(1,ppG23h)= &
!                         c_in_layer_1*p_poro(1)*(p_d_tot-ccb(1,iiG13))
!                     ccb3d(i,j,0:1,1:numbc)=ccb(0:1,1:numbc)
!                   endif
!                 enddo
!               enddo
!               flagb(ppG3c)=1; flagb(ppG3h)=1;flagb(ppG13c)=1;flagb(ppG13h)=1
!               flagb(ppG23c)=1; flagb(ppG23h)=1
!             endif
!           endif
!           ccb(0:1,1:numbc)=ccb_orig(0:1,1:numbc)
            STDERR "Befor Check Check Y2c"
            do i=imin,imax
              do j=jmin,jmax
                if (az(i,j).ge.1) then
                  if (ccb3d(i,j,1,ppY2c)< 1.0D-5) then
                    n=0;cx_any=0.0
                    do k=i-1,i+1
                      do l=j-1,j+1
                        if (k>0.and.l>0.and.k<=imax.and.l<=jmax) then
                        if (az(k,l).ge.1.and.(k.ne.i.or.l.ne.j)) then
                           n=n+1;cx_any=cx_any+ccb3d(k,l,1,ppY2c)
                        endif
                        endif
                      enddo
                    enddo
                    if ( n>=2) then
                      cx_any=0.1*cx_any/real(n)
                      if (cx_any>1.0D-5) then
                        STDERR 'low Y2c value reset to ', i,j,cx_any
                        ccb3d(i,j,1,ppY2c)=cx_any
                        ccb3d(i,j,1,ppY2n)=ccb3d(i,j,1,ppY2c)*p_qn(iiY2)
                        ccb3d(i,j,1,ppY2p)=ccb3d(i,j,1,ppY2c)*p_qp(iiY2)
                      endif
                    endif
                  endif
                endif
              enddo
            enddo
            do i=imin,imax
              do j=jmin,jmax
                if (az(i,j).ge.1) then
                  if (ccb3d(i,j,1,ppY6c)< 1.0D-5) then
                    n=0;cx_any=0.0
                    do k=i-1,i+1
                      do l=j-1,j+1
                        if (k>0.and.l>0.and.k<=imax.and.l<=jmax) then
                        if (az(k,l).ge.1.and.(k.ne.i.or.l.ne.j)) then
                           n=n+1;cx_any=cx_any+ccb3d(k,l,1,ppY6c)
                        endif
                        endif
                      enddo
                    enddo
                    if ( n>=2) then
                      cx_any=0.1*cx_any/real(n)
                      if (cx_any>1.0D-5) then
                        STDERR 'low Y6c value reset to ', i,j,cx_any
                        ccb3d(i,j,1,ppY6c)=cx_any
                        ccb3d(i,j,1,ppY6n)=ccb3d(i,j,1,ppY6c)*p_qn(iiY6)
                        ccb3d(i,j,1,ppY6p)=ccb3d(i,j,1,ppY6c)*p_qp(iiY6)
                      endif
                    endif
                  endif
                endif
              enddo
            enddo
            do i=imin,imax
              do j=jmin,jmax
                if (az(i,j).ge.1) then
                 do k=1,iiBenBacteria
                    l=ppBenBacteria(k,iiC)
                    cx_any=ccb3d(i,j,1,l)
                    if (cx_any<0.0D+00) then
                     ccb3d(i,j,0:1,l)=1.0D-80
                     ccb3d(i,j,0:1,ppBenBacteria(k,iiN))=ccb3d(i,j,0:1,l)*p_qBnc
                     ccb3d(i,j,0:1,ppBenBacteria(k,iiP))=ccb3d(i,j,0:1,l)*p_qBpc
                     STDERR 'i,j:',i,j,'negative Bac:reset to 1.0E-80 type:',k
                    endif
                 enddo
                endif
               enddo
            enddo
            do i=imin,imax
              do j=jmin,jmax
                if (az(i,j).ge.1) then
                  cx_any=ccb3d(i,j,1,ppQ6c) 
                  if( cx_any<_ZERO_.or.cx_any>1.0E7 ) then
                    ccb3d(i,j,0:1,ppQ6c)=ccb(0:1,ppQ6c)
                    ccb3d(i,j,0:1,ppQ6n)=ccb(0:1,ppQ6n)
                    ccb3d(i,j,0:1,ppQ6p)=ccb(0:1,ppQ6p)
                    ccb3d(i,j,0:1,ppQ6s)=ccb(0:1,ppQ6s)
                    STDERR "for point",i,j," all Q6 get default 1d-value"
                  endif
                  cx_any=ccb3d(i,j,1,ppQ16c) 
                  if( cx_any<_ZERO_.or.cx_any>1.0E7 ) then
                    ccb3d(i,j,0:1,ppQ16c)=ccb(0:1,ppQ16c)
                    ccb3d(i,j,0:1,ppQ16n)=ccb(0:1,ppQ16n)
                    ccb3d(i,j,0:1,ppQ16p)=ccb(0:1,ppQ16p)
                    ccb3d(i,j,0:1,ppQ16s)=ccb(0:1,ppQ16s)
                    STDERR "for point",i,j," all Q16 get default 1d-value"
                  endif
                  cx_any=ccb3d(i,j,1,ppQ26c) 
                  if( cx_any<_ZERO_.or.cx_any>1.0E7 ) then
                    ccb3d(i,j,0:1,ppQ26c)=ccb(0:1,ppQ26c)
                    ccb3d(i,j,0:1,ppQ26n)=ccb(0:1,ppQ26n)
                    ccb3d(i,j,0:1,ppQ26p)=ccb(0:1,ppQ26p)
                    ccb3d(i,j,0:1,ppQ26s)=ccb(0:1,ppQ26s)
                    STDERR "for point",i,j," all Q26 get default 1d-value"
                  endif
                endif
              enddo
            enddo
            l=0
            rc=0
!           do i=imin,imax
!             do j=jmin,jmax
!               if (az(i,j) .eq. 1 ) then
!                 k=0
!                 do n=1,numbc
!                   if ( flagb(n).eq.1.and.ccb3d(i,j,1,n) < pretty_small) k=-1
!                 enddo
!                 if ( k<0) then
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiC,&
!                              iiBenBacteria,1,numbc,ppBenBacteria,ig=i,jg=j)
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiN,&
!                              iiBenBacteria,1,numbc,ppBenBacteria,ig=i,jg=j)
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiP,&
!                               iiBenBacteria,1,numbc,ppBenBacteria,ig=i,jg=j)
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiC,&
!                             iiBenOrganisms,1,numbc,ppBenOrganisms,ig=i,jg=j)
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiN,&
!                             iiBenOrganisms,1,numbc,ppBenOrganisms,ig=i,jg=j)
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiP,&
!                            iiBenOrganisms,1,numbc,ppBenOrganisms,ig=i,jg=j)
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiC,&
!                    iiSuspensionFeeders,1,numbc,ppSuspensionFeeders,ig=i,jg=j)
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiN,&
!                    iiSuspensionFeeders,1,numbc,ppSuspensionFeeders,ig=i,jg=j)
!                   call calc_GrpNP(iiBen,ccb_orig,flagb,iiC,iiP,&
!                   iiSuspensionFeeders,1,numbc,ppSuspensionFeeders,ig=i,jg=j)
!                   ccb(0:1,1:numbc)=ccb3d(i,j,0:1,1:numbc)
!                 endif
!                 if (ccb3d(i,j,1,ppHac)>0.99*ccb3d(i,j,1,ppHNc)) then
!                   ccb3d(i,j,1,ppHac)=0.99*ccb3d(i,j,1,ppHNc)
!                    write(msg,'(A,'' was larger than '',G12.6,'' i='', &
!                    & I3,'' ('',I3'') j='',I3,'' (''I3,'')'')') &
!                    trim(var_names(ppHac+stBenStateS-1)), &
!                    0.99*ccb3d(i,j,1,ppHNc), i+ioff,i,j+joff,j
!                   LEVEL4 trim(msg)
!                 endif
!               endif
!             enddo
!           enddo
            if ( ppDcm> 0 .and. ppDfm >0 ) then
              if ( flagb(ppDcm)==0 .and. flagb(ppDfm) == 1) then
                LEVEL3 'No initial values present for ppDcm'
                LEVEL3 'Make initial values for ppDcm equal to ppDfm'
                do i=imin,imax
                   do j=jmin,jmax
                     if (az(i,j).ge.1)&
                       ccb3d(i,j,:,ppDcm)= ccb3d(i,j,:,ppDfm)
                   enddo
                enddo
                flagb(ppDcm)=1
              endif
            endif
            l=0
            do n=1,numbc
              if (flagb(n)==0 ) then
                if (l==0 ) then
                  l=1;LEVEL3 'No initial data present, ', &
                                  ' initialized with default (1D)values:'
                endif
                ccb1d(:)=ccb(:,n)
                LEVEL4 trim(var_names(n+stBenStateS-1)),':',ccb1d(1)
                do i=imin,imax
                  do j=jmin,jmax
                    if (az(i,j) .ge. 1 ) then
!                     call check_ben_states_on_neg_values_for_track &
!                                           (n,numbc,1,i,j,ccb_copy)
                      ccb3d(i,j,:,n)=ccb1d(:)
                    endif
                  enddo
                enddo
              endif
            enddo
            do i=imin,imax
              do j=jmin,jmax
                if(az(i,j)==1  .and. ccb3d(i,j,1,1)<_ZERO_) then
                 LEVEL4 'Apparently bathymetry changed for point:', i,j
                 LEVEL4 'Benthic values for this initialized with (1D) values'
                    ccb3d(i,j,:,:)=ccb
                endif
              enddo
            enddo
!            do n=1,numbc
            do i=imin,imax
              do j=jmin,jmax
                if(az(i,j)==2 ) then
                  ccb3d(i,j,0:1,:)=-9999.0
                endif
              enddo
            enddo
!-----------------end---check bio-state vars in benthic----------------------
            endif
            deallocate(var_names_hotstart)
          endif
          if (fmt_file.eq.NETCDF) call read_restart_bio_ncdf(7,0,n,string)
       end if
     endif
     first=.false.
#endif
  end subroutine restart_file_bio

  subroutine calc_GrpNP(iiSys,cx,flag,iiC,iiN,iiM,nlev,n,ppM,ig,jg)
#ifdef BFM_GOTM
  use bfm_output, only: var_names,stBenStateS
  use variables_bio_3d, only: cc3d,ccb3d
  use mem,only: iiPel,iiBen
#endif

  implicit none
  integer,intent(IN)            ::iiSys
  REALTYPE,intent(IN)           ::cx(0:nlev,1:n)
  integer,intent(INOUT)         ::flag(1:n)
  integer,intent(IN)            ::iiC
  integer,intent(IN)            ::iiN
  integer,intent(IN)            ::iiM
  integer,intent(IN)            ::nlev
  integer,intent(IN)            ::n
  integer,intent(IN),optional   ::ig
  integer,intent(IN),optional   ::jg


  INTERFACE                             ! Specification
   integer FUNCTION ppM(i,ll)          ! Specification
     integer,INTENT(IN)   ::i           ! Specification
     integer,INTENT(IN)   ::ll         ! Specification
   END FUNCTION                         ! Specification
  END  INTERFACE                        ! Specification

#ifdef BFM_GOTM
  integer                               :: i,j,k,l,plus
  REALTYPE                              :: r

  do i=1,iiM
    k=ppM(i,iiC)
    j=ppM(i,iiN)
    if ( j>0 ) then
      plus=0
      select case (iiSYS)
        case (iiPel)
          if ( flag(j)==0 ) then
            write(msg,'(A,'' was not initialized'')') &
                             trim(var_names(j+plus)) ; LEVEL4 trim(msg)
            write(msg, &
               '(A,'' initialized assuming a fixed ../C quotum of '',G12.6)')  &
               trim(var_names(j+plus)), cx(nlev,j)/(1.0D-80+cx(nlev,k))
            flag(j)=1
            forall (l=1:nlev) &
!OLD:              cc3d(j,:,:,l)=cc3d(k,:,:,l)*cx(j,l)/(1.0D-80+cx(k,l))
               cc3d(:,:,l,j)=cc3d(:,:,l,k)*cx(j,l)/(1.0D-80+cx(l,k))
             LEVEL4 trim(msg )
          endif
       case(iiBen)
         if ( flag(j)==1 ) then
          plus=stBenStateS-1
          r=1.0D+80
          r=min(r,ccb3d(ig,jg,1,j))
!         STDERR "init_ben_orgranism",nlev,i,k,j,ig,jg
          if ( r<pretty_small.or.isnan(r)) then
            write(msg,'(A,'' was smaller than '',G12.6,'' i='',I3, &
              &'' ('',I3'') j='',I3,'' (''I3,'')'')') &
             trim(var_names(j+plus)),pretty_small,ig+ioff,ig,jg+joff,jg
            LEVEL4 trim(msg)
            select case (i==iiC)
              case (.true.)
               write(msg,'(A,'' set on '',G12.6)') &
                                    trim(var_names(j+plus)),pretty_small
               forall (l=1:nlev) ccb3d(ig,jg,l,j)=pretty_small
              case (.false.)
               write(msg,'(A, &
                 '' reinitialized assuming a fixed ../C quotum of '',G14.6)') &
                 trim(var_names(j+plus)), cx(nlev,j)/(1.0D-80+cx(nlev,k))
               forall (l=1:nlev) &
                 ccb3d(ig,jg,l,j)=max(_ZERO_,ccb3d(ig,jg,l,k)) &
                                                     *cx(j,l)/(1.0D-80+cx(l,k))
            end select
            LEVEL4 trim(msg)
          endif
          if ( iiN.ne.iiC) then
            if ( r>ccb3d(ig,jg,1,k) ) then
              write(msg,'(A,'' was larger than (C-value) '',G14.6,'' i='',I3, &
              &'' ('',I3'') j='',I3,'' (''I3,'')'')') &
             trim(var_names(j+plus)),cc3d(ig,jg,1,k),ig+ioff,ig,jg+joff,jg
              write(msg,'(A, &
                '' reinitialized assuming a fixed ../C quotum of '',G14.6)') &
                 trim(var_names(j+plus)), cx(nlev,j)/(1.0D-80+cx(nlev,k))
               forall (l=1:nlev) &
                 ccb3d(ig,jg,l,j)=max(_ZERO_,ccb3d(ig,jg,l,k)) &
                                                     *cx(j,l)/(1.0D-80+cx(l,k))
            endif
            LEVEL4 trim(msg)
          endif

        endif
       end select
    endif
   enddo
#endif
  end subroutine calc_GrpNP

end module output_restart_bio

!-----------------------------------------------------------------------
!EOC
!-----------------------------------------------------------------------
! Copyright (C) 2008 - BFM                                              !
!-----------------------------------------------------------------------

